name: tests
on:
  push:
    paths-ignore:
      - "README.md"
      - ".gitignore"
      - "static/**"
  pull_request:
    branches:
      - master
    paths-ignore:
      - "README.md"
      - ".gitignore"
      - "static/**"

jobs:
  tests:
    strategy:
      matrix:
        test_type:
          - BLITZ
          - CLASSIC

    runs-on: "ubuntu-20.04"
    timeout-minutes: 15
    env:
      TEST: 1
      TEST_TYPE: ${{ matrix.test_type }}
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup tests
        run: python tests/setup_forcad.py
      - name: Install requirements
        run: |
          pip install -r cli/requirements.txt
          pip install -r tests/requirements.txt
          pip install -r backend/requirements.txt
      - name: Setup ForcAD
        run: ./control.py setup
      - name: Build ForcAD
        run: ./control.py build

      - name: Start & run tests
        run: |
          export $(find ./docker_config -name "*.env" -exec egrep -v '^#' {} \; | xargs)
          ./control.py start
          docker ps
          docker-compose ps
          docker-compose logs -f initializer
          python tests/wait_for_start.py
          ./control.py rd ps
          env | sort
          python -m unittest discover -v -s tests

      - name: Show logs
        if: ${{ failure() }}
        run: ./control.py rd logs --tail 2000

  backend_linter:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: pip install flake8
      - name: Run linters
        uses: wearerequired/lint-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          flake8: true

  frontend_linter:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Node 13
        uses: actions/setup-node@v2
        with:
          node-version: '13'
      - name: Install dependencies
        working-directory: front
        run: yarn install
      - name: Run linters
        uses: wearerequired/lint-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          auto_fix: true
          eslint: true
          prettier: true
          eslint_dir: front/src
          prettier_dir: front/src

  test_kube:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.19.0/skaffold-linux-amd64
          chmod +x skaffold
          sudo mv skaffold /usr/local/bin
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.17.1'
          kubernetes version: 'v1.19.3'
          github token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install cli requirements
        run: pip install -r cli/requirements.txt
      - name: Copy test config
        run: python tests/setup_forcad.py
      - name: Setup configuration
        run: ./control.py kube setup
      - name: Kustomize build
        uses: karancode/kustomize-github-action@master
        with:
          kustomize_version: '3.9.2'
          kustomize_build_dir: 'deploy'
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Skaffold build
        run: ./control.py kube build

  terraform_checks:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: deploy/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        run: terraform init
      - name: Terraform Validate
        run: terraform validate
